@page "/Admin/User/{userId}/"
@inject UserService UserService
@using Ava.Data.Users
@using Microsoft.AspNetCore.Authorization
@using Ava.Components.Account.Shared
@using Ava.Components.Admin.Users.Components
@inherits Ava.Components.Bases.LayoutBase
@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Roles="Admin" Context="authContext">
    <Authorized Context="authorizedContext">
        <UserNavBar User="user" PageName="Profile" />
        <div class="flex justify-center mt-1">
            <div class="w-4/5">
                @if (userInputModel != null)
                {
                    @if (userUpdated)
                    {
                        <div class="p-4 mb-4 text-sm text-green-800 rounded-lg bg-green-50 dark:bg-gray-800 dark:text-green-400 w-full" role="alert">
                            <span class="font-medium">Success!</span> The user account has been updated.
                        </div>
                    }
                    @if (formDisabled == false)
                    {
                        <div class="flex flex-col space-y-4">


                            <EditForm Model="userInputModel" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="grid grid-cols-3 gap-4">
                                    <div class="p-2">
                                        <label for="given" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Given Name</label>
                                        <InputText id="given" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.Given" required />
                                    </div>
                                    <div class="p-2">
                                        <label for="middle" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Middle Name</label>
                                        <InputText id="middle" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.Middle" />
                                    </div>
                                    <div class="p-2">
                                        <label for="family" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Family Name</label>
                                        <InputText id="family" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.Family" required />
                                    </div>
                                </div>

                                <div class="grid grid-cols-3 gap-4">
                                    <div class="p-2">
                                        <label for="birthdate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Birthdate</label>
                                        <InputDate id="birthdate" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.Birthdate" required />
                                    </div>
                                    <div class="p-2">
                                        <label for="gamertag" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Gamertag</label>
                                        <InputText id="gamertag" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.Gamertag" required />
                                    </div>
                                    <div class="p-2">
                                        <label for="gender" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Gender</label>
                                        <InputSelect id="gender" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.Gender">
                                            @foreach (var gender in Enum.GetValues(typeof(Gender)))
                                            {
                                                <option value="@gender">@gender</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="grid grid-cols-3 gap-4">
                                    <div class="p-2">
                                        <label for="city" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">City</label>
                                        <InputText id="city" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.City" />
                                    </div>
                                    <div class="p-2">
                                        <label for="state" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">State</label>
                                        <InputText id="state" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.State" />
                                    </div>
                                    <div class="p-2">
                                        <label for="country" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Country</label>
                                        <InputSelect id="country" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.Country" required>
                                            @foreach (var country in Enum.GetValues(typeof(Country)))
                                            {
                                                <option value="@country">@EnumHelper.GetEnumDescription((Country)country)</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="mb-3" style="display: none;">
                                    <label for="profilePictureUrl" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Profile Picture URL</label>
                                    <InputText id="profilePictureUrl" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" @bind-Value="userInputModel.ProfilePictureUrl" />
                                </div>

                                <button type="submit" class="bg-primary text-white pl-2 py-2 px-4 rounded hover:bg-primary-500">Save</button>
                            </EditForm>
                        </div>
                    }
                    else
                    {
                        <div class="flex flex-col space-y-4">
                            <EditForm Model="userInputModel" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="grid grid-cols-3 gap-4">
                                    <div class="p-2">
                                        <label for="given" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Given Name</label>
                                        <InputText id="given" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.Given" required disabled />
                                    </div>
                                    <div class="p-2">
                                        <label for="middle" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Middle Name</label>
                                        <InputText id="middle" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.Middle" disabled />
                                    </div>
                                    <div class="p-2">
                                        <label for="family" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Family Name</label>
                                        <InputText id="family" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.Family" required disabled />
                                    </div>
                                </div>

                                <div class="grid grid-cols-3 gap-4">
                                    <div class="p-2">
                                        <label for="birthdate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Birthdate</label>
                                        <InputDate id="birthdate" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.Birthdate" required disabled />
                                    </div>
                                    <div class="p-2">
                                        <label for="gamertag" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Gamertag</label>
                                        <InputText id="gamertag" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.Gamertag" required disabled />
                                    </div>
                                    <div class="p-2">
                                        <label for="gender" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Gender</label>
                                        <InputSelect id="gender" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.Gender" disabled>
                                            @foreach (var gender in Enum.GetValues(typeof(Gender)))
                                            {
                                                <option value="@gender">@gender</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="grid grid-cols-3 gap-4">
                                    <div class="p-2">
                                        <label for="city" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">City</label>
                                        <InputText id="city" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.City" disabled />
                                    </div>
                                    <div class="p-2">
                                        <label for="state" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">State</label>
                                        <InputText id="state" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.State" disabled />
                                    </div>
                                    <div class="p-2">
                                        <label for="country" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Country</label>
                                        <InputSelect id="country" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.Country" required disabled>
                                            @foreach (var country in Enum.GetValues(typeof(Country)))
                                            {
                                                <option value="@country">@EnumHelper.GetEnumDescription((Country)country)</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="mb-3" style="display: none;">
                                    <label for="profilePictureUrl" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Profile Picture URL</label>
                                    <InputText id="profilePictureUrl" class="bg-gray-200 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-600 dark:border-gray-600 dark:text-white" @bind-Value="userInputModel.ProfilePictureUrl" disabled />
                                </div>

                                <button class="bg-primary text-white pl-2 py-2 px-4 rounded hover:bg-primary-500" @onclick="MakeEditable">Edit</button>
                            </EditForm>
                        </div>

                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code
{
    [Parameter]
    public string userId { get; set; } = default!;

    private ApplicationUserInputModel userInputModel;
    private ApplicationUser user;

    private bool userUpdated = false;

    private bool formDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(userId))
        {
            user = await UserService.FindUserByIdAsync(userId);
            if (user != null)
            {
                userInputModel = new ApplicationUserInputModel
                    {
                        Given = user.Given,
                        Middle = user.Middle,
                        Family = user.Family,
                        Birthdate = user.Birthdate,
                        Gamertag = user.Gamertag,
                        Gender = Enum.TryParse<Gender>(user.Gender, out var parsedGender) ? parsedGender.ToString() : Gender.Other.ToString(),
                        City = user.City,
                        State = user.State,
                        Country = Enum.TryParse<Country>(user.Country.Replace(" ", ""), out var parsedCountry) ? parsedCountry.ToString() : Country.Other.ToString(),
                        ProfilePictureUrl = user.ProfilePictureUrl
                    };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (user != null)
        {
            user.Given = userInputModel.Given;
            user.Middle = userInputModel.Middle;
            user.Family = userInputModel.Family;
            user.Birthdate = userInputModel.Birthdate;
            user.Gamertag = userInputModel.Gamertag;
            user.Gender = userInputModel.Gender.ToString();
            user.City = userInputModel.City;
            user.State = userInputModel.State;
            user.Country = userInputModel.Country.ToString().Replace(" ", "");
            user.ProfilePictureUrl = userInputModel.ProfilePictureUrl;

            var success = await UserService.UpdateUserAsync(userInputModel, userId);
            if (success)
            {
                userUpdated = true;
                formDisabled = true;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                // Handle failure (e.g., show an error message)
            }
        }
    }

    private async Task MakeEditable()
    {
        formDisabled = false;
        userUpdated = false;
        await InvokeAsync(StateHasChanged);
    }
}
