@page "/Account/Login"
@layout AuthenticationLayout
@using System.ComponentModel.DataAnnotations
@using Ava.Components.Layout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Ava.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1 class="text-2xl font-bold mb-4">Log in</h1>
<section>
    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="space-y-4">
        <DataAnnotationsValidator />
        <h2 class="text-xl font-semibold mb-2">Use a local account to log in.</h2>
        <hr class="border-gray-300" />
        <ValidationSummary class="text-red-500" role="alert" />
        <div class="relative mb-4">
            <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
            <InputText id="email" @bind-Value="Input.Email" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="name@example.com" aria-required="true" />
            <ValidationMessage For="() => Input.Email" class="text-red-500" />
        </div>
        <div class="relative mb-4">
            <label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
            <InputText id="password" type="password" @bind-Value="Input.Password" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="password" aria-required="true" />
            <ValidationMessage For="() => Input.Password" class="text-red-500" />
        </div>
        <div class="flex items-center mb-4">
            <label class="inline-flex items-center text-sm font-medium text-gray-900 dark:text-white">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-checkbox text-primary-500 focus:ring-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-500 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800" />
                <span class="ml-2">Remember me</span>
            </label>
        </div>
        <div>
            <button type="submit" class="w-full bg-primary text-white py-2 px-4 rounded hover:bg-primary-500">Log in</button>
        </div>
        <div class="mt-4">
            <p>
                <a href="Account/ForgotPassword" class="text-primary-500 hover:underline">Forgot your password?</a>
            </p>
            <p>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-primary-500 hover:underline">Register as a new user</a>
            </p>
            <p>
                <a href="Account/ResendEmailConfirmation" class="text-primary-500 hover:underline">Resend email confirmation</a>
            </p>
        </div>
    </EditForm>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
