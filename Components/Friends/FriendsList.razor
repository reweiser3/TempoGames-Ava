@using Ava.Data.Friendship
@using Ava.Services
@inject FriendsService FriendsService
@inject NavigationManager Navigation
@inherits Ava.Components.Bases.LayoutBase

@if (CurrentUser != null || CurrentUser != default)
{
    <div class="w-full max-w-md p-4 bg-white border border-gray-200 rounded-lg shadow sm:p-8 dark:bg-gray-800 dark:border-gray-700">
        <div class="flex items-center justify-between mb-4">
            <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white">Friends Online</h5>
            <a href="#" class="text-sm font-medium text-blue-600 hover:underline dark:text-blue-500">
                View all
            </a>
        </div>
        <div class="flow-root">
            <ul role="list" class="divide-y divide-gray-200 dark:divide-gray-700">
                @if (friends == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    @foreach (var friend in friends)
                    {
                        <li class="py-3 sm:py-4">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <img class="w-8 h-8 rounded-full" src="images/avatars/@friend.FriendUser.ProfilePictureUrl" alt="@friend.FriendUser.UserName">
                                </div>
                                <div class="flex-1 min-w-0 ms-4">
                                    <p class="text-sm font-medium text-gray-900 truncate dark:text-white">
                                        @friend.FriendUser.Gamertag
                                    </p>
                                    <p class="text-sm text-gray-500 truncate dark:text-gray-400">
                                        @friend.FriendUser.Email
                                    </p>
                                </div>
                                <div class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white">
                                    <div class="flex items-center">
                                        @if (friend.IsFavorite)
                                        {
                                            <svg class="w-4 h-4 text-yellow-300 ms-1" @onclick="() => ToggleFavorite(friend)" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 22 20">
                                                <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z"/>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4 text-gray-300 ms-1" @onclick="() => ToggleFavorite(friend)" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" viewBox="0 0 22 20">
                                                <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z"/>
                                            </svg>
                                        }
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<Friend> friends;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (CurrentUser != null)
        {
            var userId = CurrentUser.Id;
            friends = await FriendsService.GetFriendsByUserIdAsync(userId);
        }
    }

    private async Task ToggleFavorite(Friend friend)
    {
        await FriendsService.ToggleFavoriteAsync(friend.PrimaryUserId, friend.FriendUserId);
        // Refresh the friends list to reflect changes
        friends = await FriendsService.GetFriendsByUserIdAsync(friend.PrimaryUserId);
    }
}